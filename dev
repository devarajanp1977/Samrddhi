#!/bin/bash
set -e

echo "🚀 Starting Samrddhi Development Environment..."

# Set environment
export SAMRDDHI_ENV=dev
export $(cat .env.dev | xargs)

# Activate virtual environment
source .venv/bin/activate

# Function to check if service is running
check_service() {
    local service=$1
    local port=$2
    if nc -z localhost $port 2>/dev/null; then
        echo "✅ $service is running on port $port"
        return 0
    else
        echo "❌ $service is not running on port $port"
        return 1
    fi
}

# Function to wait for service
wait_for_service() {
    local service=$1
    local port=$2
    local max_attempts=30
    local attempt=1
    
    echo "⏳ Waiting for $service to be ready..."
    while ! check_service "$service" "$port"; do
        if [ $attempt -eq $max_attempts ]; then
            echo "❌ $service failed to start after $max_attempts attempts"
            exit 1
        fi
        echo "   Attempt $attempt/$max_attempts - waiting for $service..."
        sleep 2
        ((attempt++))
    done
}

# Check and start required services
echo "🔍 Checking system services..."

# PostgreSQL
if ! check_service "PostgreSQL" 5432; then
    echo "🐘 Starting PostgreSQL..."
    sudo systemctl start postgresql
    wait_for_service "PostgreSQL" 5432
fi

# Redis
if ! check_service "Redis" 6379; then
    echo "🔴 Starting Redis..."
    sudo systemctl start redis-server
    wait_for_service "Redis" 6379
fi

# InfluxDB
if ! check_service "InfluxDB" 8086; then
    echo "📊 Starting InfluxDB..."
    sudo systemctl start influxdb
    wait_for_service "InfluxDB" 8086
fi

# Create Docker network if not exists
echo "🐳 Setting up Docker network..."
docker network create samrddhi-network 2>/dev/null || echo "Network already exists"

# Start Kafka using Docker (skip if permission issues)
echo "📡 Starting Kafka..."
if docker-compose -f infrastructure/docker/kafka-dev.yml up -d 2>/dev/null; then
    # Wait for Kafka
    wait_for_service "Kafka" 9092
else
    echo "⚠️  Skipping Kafka (Docker permission issues) - core services ready"
fi

# Run database migrations and initialization
echo "🗄️  Setting up database..."
cd backend
python -m alembic upgrade head || echo "No migrations to run"
echo "🎯 Initializing demo data..."
python init_database.py
cd ..

# Kill any existing processes on required ports
echo "🧹 Cleaning up any existing processes..."
for port in 8000 8100 8141 8160 8180 8300 3000; do
    if lsof -ti:$port >/dev/null 2>&1; then
        echo "   Stopping process on port $port"
        lsof -ti:$port | xargs kill -9 2>/dev/null || true
    fi
done
sleep 2

# Start backend services in development mode
echo "🚀 Starting backend services..."

# Start API Gateway
cd backend/services/core-trading/api-gateway
uvicorn main:app --host 0.0.0.0 --port 8000 --reload &
API_GATEWAY_PID=$!
cd ../../../../

# Wait for API Gateway
wait_for_service "API Gateway" 8000

# Start core services
echo "🔧 Starting core trading services..."

cd backend/services/core-trading/portfolio-service
python main.py &
PORTFOLIO_PID=$!
cd ../../../../
wait_for_service "Portfolio Service" 8100

cd backend/services/core-trading/market-data-service
python main.py &
MARKET_DATA_PID=$!
cd ../../../../
wait_for_service "Market Data Service" 8141

cd backend/services/core-trading/order-management-service
python main.py &
ORDER_MGMT_PID=$!
cd ../../../../
wait_for_service "Order Management Service" 8160

cd backend/services/core-trading/risk-management-service
python main.py &
RISK_MGMT_PID=$!
cd ../../../../
wait_for_service "Risk Management Service" 8180

cd backend/services/dashboard-api
python main.py &
DASHBOARD_PID=$!
cd ../../
wait_for_service "Dashboard API" 8300

# Start frontend
echo "🎨 Starting frontend..."
cd /home/dev/Samrddhi/frontend
if [ ! -f package.json ]; then
    echo "❌ Frontend package.json not found"
    exit 1
fi
npm start > frontend.log 2>&1 &
FRONTEND_PID=$!

# Wait for frontend
wait_for_service "Frontend" 3000

# Start monitoring services
echo "📊 Starting monitoring..."
cd infrastructure/monitoring
docker-compose up -d
cd ../..

# Wait a moment for everything to initialize
sleep 5

# Health check all services
echo "🏥 Running comprehensive health checks..."
services_healthy=true

for service_info in "API Gateway:8000" "Portfolio Service:8100" "Market Data:8141" "Order Management:8160" "Risk Management:8180" "Dashboard API:8300" "Frontend:3000"; do
    service_name=$(echo $service_info | cut -d: -f1)
    port=$(echo $service_info | cut -d: -f2)
    
    if curl -s -f "http://localhost:$port/health" >/dev/null 2>&1 || check_service "$service_name" "$port"; then
        echo "✅ $service_name is healthy"
    else
        echo "❌ $service_name health check failed"
        services_healthy=false
    fi
done

if [ "$services_healthy" = false ]; then
    echo "⚠️  Some services failed health checks, but platform is starting..."
fi

# Store PIDs for cleanup
echo $API_GATEWAY_PID > .dev_pids
echo $PORTFOLIO_PID >> .dev_pids
echo $MARKET_DATA_PID >> .dev_pids
echo $ORDER_MGMT_PID >> .dev_pids
echo $RISK_MGMT_PID >> .dev_pids
echo $DASHBOARD_PID >> .dev_pids
echo $FRONTEND_PID >> .dev_pids

echo ""
echo "✅ Samrddhi Development Environment is running!"
echo ""
echo "🌐 Access Points:"
echo "   Dashboard:    http://localhost:3000"
echo "   API Docs:     http://localhost:8000/docs"
echo "   Monitoring:   http://localhost:9090 (Prometheus)"
echo "   Grafana:      http://localhost:3001"
echo ""
echo "📊 Service Status:"
check_service "API Gateway" 8000
check_service "Portfolio Service" 8100
check_service "Market Data Service" 8141
check_service "Order Management" 8160
check_service "Risk Management" 8180
check_service "Dashboard API" 8300
check_service "Frontend" 3000
check_service "PostgreSQL" 5432
check_service "Redis" 6379
check_service "InfluxDB" 8086
check_service "Kafka" 9092
check_service "Prometheus" 9090
echo ""

# Open browser
echo "🦁 Opening Brave Browser..."
if command -v brave-browser &> /dev/null; then
    brave-browser http://localhost:3000 &
elif command -v brave-browser-stable &> /dev/null; then
    brave-browser-stable http://localhost:3000 &
elif command -v google-chrome &> /dev/null; then
    google-chrome http://localhost:3000 &
elif command -v firefox &> /dev/null; then
    firefox http://localhost:3000 &
else
    echo "🌐 Please open http://localhost:3000 in your browser"
fi

echo "📋 Logs are available in: logs/"
echo "🛑 To stop all services, run: ./stop"
echo ""
echo "🎯 Happy trading! The platform is ready for development."

# Keep script running and show logs
echo "📜 Showing live logs (Ctrl+C to exit)..."
tail -f logs/system/samrddhi.log 2>/dev/null || echo "Waiting for logs..."

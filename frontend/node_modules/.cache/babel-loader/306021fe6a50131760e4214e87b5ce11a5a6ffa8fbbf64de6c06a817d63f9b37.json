{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  theme: 'dark',\n  timezone: 'America/New_York',\n  defaultTimeframe: '5m',\n  notifications: {\n    email: true,\n    push: true,\n    desktop: true,\n    orderFills: true,\n    alerts: true,\n    systemUpdates: true\n  },\n  trading: {\n    confirmOrders: true,\n    defaultOrderType: 'limit',\n    riskWarnings: true,\n    autoRefresh: true,\n    refreshInterval: 5000\n  },\n  dashboard: {\n    layout: 'default',\n    widgets: ['portfolio', 'positions', 'watchlist', 'orders', 'news'],\n    watchlist: ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA']\n  },\n  loading: false,\n  error: null\n};\nconst settingsSlice = createSlice({\n  name: 'settings',\n  initialState,\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n      if (action.payload) {\n        state.error = null;\n      }\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    updateSettings: (state, action) => {\n      Object.assign(state, action.payload);\n      state.loading = false;\n      state.error = null;\n    },\n    updateTheme: (state, action) => {\n      state.theme = action.payload;\n    },\n    updateTimezone: (state, action) => {\n      state.timezone = action.payload;\n    },\n    updateNotificationSettings: (state, action) => {\n      state.notifications = {\n        ...state.notifications,\n        ...action.payload\n      };\n    },\n    updateTradingSettings: (state, action) => {\n      state.trading = {\n        ...state.trading,\n        ...action.payload\n      };\n    },\n    updateDashboardSettings: (state, action) => {\n      state.dashboard = {\n        ...state.dashboard,\n        ...action.payload\n      };\n    },\n    addWidgetToDashboard: (state, action) => {\n      if (!state.dashboard.widgets.includes(action.payload)) {\n        state.dashboard.widgets.push(action.payload);\n      }\n    },\n    removeWidgetFromDashboard: (state, action) => {\n      state.dashboard.widgets = state.dashboard.widgets.filter(widget => widget !== action.payload);\n    },\n    updateDefaultTimeframe: (state, action) => {\n      state.defaultTimeframe = action.payload;\n    }\n  }\n});\nexport const {\n  setLoading,\n  setError,\n  updateSettings,\n  updateTheme,\n  updateTimezone,\n  updateNotificationSettings,\n  updateTradingSettings,\n  updateDashboardSettings,\n  addWidgetToDashboard,\n  removeWidgetFromDashboard,\n  updateDefaultTimeframe\n} = settingsSlice.actions;\nexport default settingsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","theme","timezone","defaultTimeframe","notifications","email","push","desktop","orderFills","alerts","systemUpdates","trading","confirmOrders","defaultOrderType","riskWarnings","autoRefresh","refreshInterval","dashboard","layout","widgets","watchlist","loading","error","settingsSlice","name","reducers","setLoading","state","action","payload","setError","updateSettings","Object","assign","updateTheme","updateTimezone","updateNotificationSettings","updateTradingSettings","updateDashboardSettings","addWidgetToDashboard","includes","removeWidgetFromDashboard","filter","widget","updateDefaultTimeframe","actions","reducer"],"sources":["/workspaces/Samrddhi/frontend/src/store/slices/settingsSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { UserPreferences } from '../../types';\n\ninterface SettingsState extends UserPreferences {\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: SettingsState = {\n  theme: 'dark',\n  timezone: 'America/New_York',\n  defaultTimeframe: '5m',\n  notifications: {\n    email: true,\n    push: true,\n    desktop: true,\n    orderFills: true,\n    alerts: true,\n    systemUpdates: true,\n  },\n  trading: {\n    confirmOrders: true,\n    defaultOrderType: 'limit',\n    riskWarnings: true,\n    autoRefresh: true,\n    refreshInterval: 5000,\n  },\n  dashboard: {\n    layout: 'default',\n    widgets: ['portfolio', 'positions', 'watchlist', 'orders', 'news'],\n    watchlist: ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA'],\n  },\n  loading: false,\n  error: null,\n};\n\nconst settingsSlice = createSlice({\n  name: 'settings',\n  initialState,\n  reducers: {\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n      if (action.payload) {\n        state.error = null;\n      }\n    },\n    setError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    updateSettings: (state, action: PayloadAction<Partial<UserPreferences>>) => {\n      Object.assign(state, action.payload);\n      state.loading = false;\n      state.error = null;\n    },\n    updateTheme: (state, action: PayloadAction<'light' | 'dark' | 'auto'>) => {\n      state.theme = action.payload;\n    },\n    updateTimezone: (state, action: PayloadAction<string>) => {\n      state.timezone = action.payload;\n    },\n    updateNotificationSettings: (state, action: PayloadAction<Partial<UserPreferences['notifications']>>) => {\n      state.notifications = { ...state.notifications, ...action.payload };\n    },\n    updateTradingSettings: (state, action: PayloadAction<Partial<UserPreferences['trading']>>) => {\n      state.trading = { ...state.trading, ...action.payload };\n    },\n    updateDashboardSettings: (state, action: PayloadAction<Partial<UserPreferences['dashboard']>>) => {\n      state.dashboard = { ...state.dashboard, ...action.payload };\n    },\n    addWidgetToDashboard: (state, action: PayloadAction<string>) => {\n      if (!state.dashboard.widgets.includes(action.payload)) {\n        state.dashboard.widgets.push(action.payload);\n      }\n    },\n    removeWidgetFromDashboard: (state, action: PayloadAction<string>) => {\n      state.dashboard.widgets = state.dashboard.widgets.filter(widget => widget !== action.payload);\n    },\n    updateDefaultTimeframe: (state, action: PayloadAction<string>) => {\n      state.defaultTimeframe = action.payload;\n    },\n  },\n});\n\nexport const {\n  setLoading,\n  setError,\n  updateSettings,\n  updateTheme,\n  updateTimezone,\n  updateNotificationSettings,\n  updateTradingSettings,\n  updateDashboardSettings,\n  addWidgetToDashboard,\n  removeWidgetFromDashboard,\n  updateDefaultTimeframe,\n} = settingsSlice.actions;\n\nexport default settingsSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
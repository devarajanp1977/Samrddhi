{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useEffect } from 'react';\nimport { useAppDispatch } from '../hooks/redux';\nimport { apiService } from '../services/apiService';\nimport { webSocketService } from '../services/websocket';\nimport { setLoading as setPortfolioLoading, setError as setPortfolioError, updatePortfolio } from '../store/slices/portfolioSlice';\nimport { setLoading as setAccountLoading, setError as setAccountError, updateAccount } from '../store/slices/accountSlice';\nimport { setLoading as setAlertsLoading, setError as setAlertsError, setAlerts } from '../store/slices/alertsSlice';\nimport { setLoading as setOrdersLoading, setError as setOrdersError, setOrders } from '../store/slices/ordersSlice';\nimport { setLoading as setStrategiesLoading, setError as setStrategiesError, setStrategies } from '../store/slices/strategiesSlice';\nimport { setLoading as setMarketDataLoading, setError as setMarketDataError, updateQuotes, setConnectionStatus } from '../store/slices/marketDataSlice';\nimport { mockPortfolio, mockAccount, mockOrders, mockStrategies, mockAlerts, mockMarketData } from '../utils/mockData';\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA !== 'false';\nexport const useInitializeApp = () => {\n  _s();\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        if (!USE_MOCK_DATA) {\n          // Try to connect to backend services\n          webSocketService.connect();\n\n          // Load real data from backend\n          await Promise.allSettled([loadPortfolioData(), loadAccountData(), loadOrdersData(), loadStrategiesData(), loadAlertsData(), loadMarketData()]);\n        } else {\n          // Use mock data for development\n          console.log('Using mock data for development');\n          loadMockData();\n        }\n      } catch (error) {\n        console.error('App initialization failed, falling back to mock data:', error);\n        loadMockData();\n      }\n    };\n    const loadMockData = () => {\n      // Load mock data immediately\n      dispatch(updatePortfolio(mockPortfolio));\n      dispatch(updateAccount(mockAccount));\n      dispatch(setOrders(mockOrders));\n      dispatch(setStrategies(mockStrategies));\n      dispatch(setAlerts(mockAlerts));\n\n      // Convert mock market data object to array\n      const marketDataArray = Object.values(mockMarketData);\n      dispatch(updateQuotes(marketDataArray));\n      dispatch(setConnectionStatus('disconnected'));\n      console.log('Mock data loaded successfully');\n    };\n    const loadPortfolioData = async () => {\n      try {\n        dispatch(setPortfolioLoading(true));\n        const [portfolioResponse, positionsResponse] = await Promise.all([apiService.getPortfolio(), apiService.getPositions()]);\n        if (portfolioResponse.success && portfolioResponse.data) {\n          const portfolioWithPositions = {\n            ...portfolioResponse.data,\n            positions: positionsResponse.data || []\n          };\n          dispatch(updatePortfolio(portfolioWithPositions));\n        }\n      } catch (error) {\n        console.error('Portfolio loading failed:', error);\n        dispatch(setPortfolioError(error instanceof Error ? error.message : 'Failed to load portfolio'));\n        // Fall back to mock data\n        dispatch(updatePortfolio(mockPortfolio));\n      }\n    };\n    const loadAccountData = async () => {\n      try {\n        dispatch(setAccountLoading(true));\n        const response = await apiService.getAccount();\n        if (response.success && response.data) {\n          dispatch(updateAccount(response.data));\n        }\n      } catch (error) {\n        console.error('Account loading failed:', error);\n        dispatch(setAccountError(error instanceof Error ? error.message : 'Failed to load account'));\n        dispatch(updateAccount(mockAccount));\n      }\n    };\n    const loadOrdersData = async () => {\n      try {\n        dispatch(setOrdersLoading(true));\n        const response = await apiService.getOrders(1, 100);\n        if (response.success && response.data) {\n          dispatch(setOrders(response.data.data));\n        }\n      } catch (error) {\n        console.error('Orders loading failed:', error);\n        dispatch(setOrdersError(error instanceof Error ? error.message : 'Failed to load orders'));\n        dispatch(setOrders(mockOrders));\n      }\n    };\n    const loadStrategiesData = async () => {\n      try {\n        dispatch(setStrategiesLoading(true));\n        const response = await apiService.getStrategies();\n        if (response.success && response.data) {\n          dispatch(setStrategies(response.data));\n        }\n      } catch (error) {\n        console.error('Strategies loading failed:', error);\n        dispatch(setStrategiesError(error instanceof Error ? error.message : 'Failed to load strategies'));\n        dispatch(setStrategies(mockStrategies));\n      }\n    };\n    const loadAlertsData = async () => {\n      try {\n        dispatch(setAlertsLoading(true));\n        const response = await apiService.getAlerts();\n        if (response.success && response.data) {\n          dispatch(setAlerts(response.data));\n        }\n      } catch (error) {\n        console.error('Alerts loading failed:', error);\n        dispatch(setAlertsError(error instanceof Error ? error.message : 'Failed to load alerts'));\n        dispatch(setAlerts(mockAlerts));\n      }\n    };\n    const loadMarketData = async () => {\n      try {\n        dispatch(setMarketDataLoading(true));\n        const watchlistSymbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX'];\n        const response = await apiService.getQuotes(watchlistSymbols);\n        if (response.success && response.data) {\n          dispatch(updateQuotes(response.data));\n          dispatch(setConnectionStatus('connected'));\n        }\n      } catch (error) {\n        console.error('Market data loading failed:', error);\n        dispatch(setMarketDataError(error instanceof Error ? error.message : 'Failed to load market data'));\n        const marketDataArray = Object.values(mockMarketData);\n        dispatch(updateQuotes(marketDataArray));\n        dispatch(setConnectionStatus('disconnected'));\n      }\n    };\n    initializeApp();\n\n    // Cleanup on unmount\n    return () => {\n      if (!USE_MOCK_DATA) {\n        webSocketService.disconnect();\n      }\n    };\n  }, [dispatch]);\n};\n_s(useInitializeApp, \"DKdeqxp2QYw2p6z8/ErYMRK/Ubo=\", false, function () {\n  return [useAppDispatch];\n});\nexport const useRefreshData = () => {\n  _s2();\n  const dispatch = useAppDispatch();\n  const refreshPortfolio = async () => {\n    try {\n      dispatch(setPortfolioLoading(true));\n      const response = await apiService.getPortfolio();\n      if (response.success && response.data) {\n        dispatch(updatePortfolio(response.data));\n      }\n    } catch (error) {\n      dispatch(setPortfolioError(error instanceof Error ? error.message : 'Failed to refresh portfolio'));\n    }\n  };\n  const refreshMarketData = async symbols => {\n    try {\n      dispatch(setMarketDataLoading(true));\n      const watchlistSymbols = symbols || ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX'];\n      const response = await apiService.getQuotes(watchlistSymbols);\n      if (response.success && response.data) {\n        dispatch(updateQuotes(response.data));\n      }\n    } catch (error) {\n      dispatch(setMarketDataError(error instanceof Error ? error.message : 'Failed to refresh market data'));\n    }\n  };\n  const refreshOrders = async () => {\n    try {\n      dispatch(setOrdersLoading(true));\n      const response = await apiService.getOrders(1, 100);\n      if (response.success && response.data) {\n        dispatch(setOrders(response.data.data));\n      }\n    } catch (error) {\n      dispatch(setOrdersError(error instanceof Error ? error.message : 'Failed to refresh orders'));\n    }\n  };\n  return {\n    refreshPortfolio,\n    refreshMarketData,\n    refreshOrders\n  };\n};\n_s2(useRefreshData, \"BJQ1DUn/XFEl2NsQ3DWyHAXfnkY=\", false, function () {\n  return [useAppDispatch];\n});","map":{"version":3,"names":["useEffect","useAppDispatch","apiService","webSocketService","setLoading","setPortfolioLoading","setError","setPortfolioError","updatePortfolio","setAccountLoading","setAccountError","updateAccount","setAlertsLoading","setAlertsError","setAlerts","setOrdersLoading","setOrdersError","setOrders","setStrategiesLoading","setStrategiesError","setStrategies","setMarketDataLoading","setMarketDataError","updateQuotes","setConnectionStatus","mockPortfolio","mockAccount","mockOrders","mockStrategies","mockAlerts","mockMarketData","USE_MOCK_DATA","process","env","REACT_APP_USE_MOCK_DATA","useInitializeApp","_s","dispatch","initializeApp","connect","Promise","allSettled","loadPortfolioData","loadAccountData","loadOrdersData","loadStrategiesData","loadAlertsData","loadMarketData","console","log","loadMockData","error","marketDataArray","Object","values","portfolioResponse","positionsResponse","all","getPortfolio","getPositions","success","data","portfolioWithPositions","positions","Error","message","response","getAccount","getOrders","getStrategies","getAlerts","watchlistSymbols","getQuotes","disconnect","useRefreshData","_s2","refreshPortfolio","refreshMarketData","symbols","refreshOrders"],"sources":["/workspaces/Samrddhi/frontend/src/hooks/useDataLoader.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport { useAppDispatch } from '../hooks/redux';\nimport { apiService } from '../services/apiService';\nimport { webSocketService } from '../services/websocket';\nimport { \n  setLoading as setPortfolioLoading,\n  setError as setPortfolioError,\n  updatePortfolio \n} from '../store/slices/portfolioSlice';\nimport {\n  setLoading as setAccountLoading,\n  setError as setAccountError,\n  updateAccount\n} from '../store/slices/accountSlice';\nimport {\n  setLoading as setAlertsLoading,\n  setError as setAlertsError,\n  setAlerts\n} from '../store/slices/alertsSlice';\nimport {\n  setLoading as setOrdersLoading,\n  setError as setOrdersError,\n  setOrders\n} from '../store/slices/ordersSlice';\nimport {\n  setLoading as setStrategiesLoading,\n  setError as setStrategiesError,\n  setStrategies\n} from '../store/slices/strategiesSlice';\nimport {\n  setLoading as setMarketDataLoading,\n  setError as setMarketDataError,\n  updateQuotes,\n  setConnectionStatus\n} from '../store/slices/marketDataSlice';\nimport {\n  mockPortfolio,\n  mockAccount,\n  mockOrders,\n  mockStrategies,\n  mockAlerts,\n  mockMarketData\n} from '../utils/mockData';\n\nconst USE_MOCK_DATA = process.env.REACT_APP_USE_MOCK_DATA !== 'false';\n\nexport const useInitializeApp = () => {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    const initializeApp = async () => {\n      try {\n        if (!USE_MOCK_DATA) {\n          // Try to connect to backend services\n          webSocketService.connect();\n          \n          // Load real data from backend\n          await Promise.allSettled([\n            loadPortfolioData(),\n            loadAccountData(),\n            loadOrdersData(),\n            loadStrategiesData(),\n            loadAlertsData(),\n            loadMarketData(),\n          ]);\n        } else {\n          // Use mock data for development\n          console.log('Using mock data for development');\n          loadMockData();\n        }\n      } catch (error) {\n        console.error('App initialization failed, falling back to mock data:', error);\n        loadMockData();\n      }\n    };\n\n    const loadMockData = () => {\n      // Load mock data immediately\n      dispatch(updatePortfolio(mockPortfolio));\n      dispatch(updateAccount(mockAccount));\n      dispatch(setOrders(mockOrders));\n      dispatch(setStrategies(mockStrategies));\n      dispatch(setAlerts(mockAlerts));\n      \n      // Convert mock market data object to array\n      const marketDataArray = Object.values(mockMarketData);\n      dispatch(updateQuotes(marketDataArray));\n      dispatch(setConnectionStatus('disconnected'));\n      \n      console.log('Mock data loaded successfully');\n    };\n\n    const loadPortfolioData = async () => {\n      try {\n        dispatch(setPortfolioLoading(true));\n        \n        const [portfolioResponse, positionsResponse] = await Promise.all([\n          apiService.getPortfolio(),\n          apiService.getPositions()\n        ]);\n\n        if (portfolioResponse.success && portfolioResponse.data) {\n          const portfolioWithPositions = {\n            ...portfolioResponse.data,\n            positions: positionsResponse.data || []\n          };\n          dispatch(updatePortfolio(portfolioWithPositions));\n        }\n      } catch (error) {\n        console.error('Portfolio loading failed:', error);\n        dispatch(setPortfolioError(error instanceof Error ? error.message : 'Failed to load portfolio'));\n        // Fall back to mock data\n        dispatch(updatePortfolio(mockPortfolio));\n      }\n    };\n\n    const loadAccountData = async () => {\n      try {\n        dispatch(setAccountLoading(true));\n        \n        const response = await apiService.getAccount();\n        if (response.success && response.data) {\n          dispatch(updateAccount(response.data));\n        }\n      } catch (error) {\n        console.error('Account loading failed:', error);\n        dispatch(setAccountError(error instanceof Error ? error.message : 'Failed to load account'));\n        dispatch(updateAccount(mockAccount));\n      }\n    };\n\n    const loadOrdersData = async () => {\n      try {\n        dispatch(setOrdersLoading(true));\n        \n        const response = await apiService.getOrders(1, 100);\n        if (response.success && response.data) {\n          dispatch(setOrders(response.data.data));\n        }\n      } catch (error) {\n        console.error('Orders loading failed:', error);\n        dispatch(setOrdersError(error instanceof Error ? error.message : 'Failed to load orders'));\n        dispatch(setOrders(mockOrders));\n      }\n    };\n\n    const loadStrategiesData = async () => {\n      try {\n        dispatch(setStrategiesLoading(true));\n        \n        const response = await apiService.getStrategies();\n        if (response.success && response.data) {\n          dispatch(setStrategies(response.data));\n        }\n      } catch (error) {\n        console.error('Strategies loading failed:', error);\n        dispatch(setStrategiesError(error instanceof Error ? error.message : 'Failed to load strategies'));\n        dispatch(setStrategies(mockStrategies));\n      }\n    };\n\n    const loadAlertsData = async () => {\n      try {\n        dispatch(setAlertsLoading(true));\n        \n        const response = await apiService.getAlerts();\n        if (response.success && response.data) {\n          dispatch(setAlerts(response.data));\n        }\n      } catch (error) {\n        console.error('Alerts loading failed:', error);\n        dispatch(setAlertsError(error instanceof Error ? error.message : 'Failed to load alerts'));\n        dispatch(setAlerts(mockAlerts));\n      }\n    };\n\n    const loadMarketData = async () => {\n      try {\n        dispatch(setMarketDataLoading(true));\n        \n        const watchlistSymbols = ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX'];\n        const response = await apiService.getQuotes(watchlistSymbols);\n        \n        if (response.success && response.data) {\n          dispatch(updateQuotes(response.data));\n          dispatch(setConnectionStatus('connected'));\n        }\n      } catch (error) {\n        console.error('Market data loading failed:', error);\n        dispatch(setMarketDataError(error instanceof Error ? error.message : 'Failed to load market data'));\n        const marketDataArray = Object.values(mockMarketData);\n        dispatch(updateQuotes(marketDataArray));\n        dispatch(setConnectionStatus('disconnected'));\n      }\n    };\n\n    initializeApp();\n\n    // Cleanup on unmount\n    return () => {\n      if (!USE_MOCK_DATA) {\n        webSocketService.disconnect();\n      }\n    };\n  }, [dispatch]);\n};\n\nexport const useRefreshData = () => {\n  const dispatch = useAppDispatch();\n\n  const refreshPortfolio = async () => {\n    try {\n      dispatch(setPortfolioLoading(true));\n      const response = await apiService.getPortfolio();\n      if (response.success && response.data) {\n        dispatch(updatePortfolio(response.data));\n      }\n    } catch (error) {\n      dispatch(setPortfolioError(error instanceof Error ? error.message : 'Failed to refresh portfolio'));\n    }\n  };\n\n  const refreshMarketData = async (symbols?: string[]) => {\n    try {\n      dispatch(setMarketDataLoading(true));\n      const watchlistSymbols = symbols || ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX'];\n      const response = await apiService.getQuotes(watchlistSymbols);\n      \n      if (response.success && response.data) {\n        dispatch(updateQuotes(response.data));\n      }\n    } catch (error) {\n      dispatch(setMarketDataError(error instanceof Error ? error.message : 'Failed to refresh market data'));\n    }\n  };\n\n  const refreshOrders = async () => {\n    try {\n      dispatch(setOrdersLoading(true));\n      const response = await apiService.getOrders(1, 100);\n      if (response.success && response.data) {\n        dispatch(setOrders(response.data.data));\n      }\n    } catch (error) {\n      dispatch(setOrdersError(error instanceof Error ? error.message : 'Failed to refresh orders'));\n    }\n  };\n\n  return {\n    refreshPortfolio,\n    refreshMarketData,\n    refreshOrders,\n  };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
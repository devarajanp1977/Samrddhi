{"ast":null,"code":"import { store } from '../store';\nimport { updateQuote, updateQuotes, setConnectionStatus } from '../store/slices/marketDataSlice';\nimport { updatePortfolio, updatePosition } from '../store/slices/portfolioSlice';\nimport { addOrder, updateOrder } from '../store/slices/ordersSlice';\nimport { addAlert } from '../store/slices/alertsSlice';\nclass WebSocketService {\n  constructor() {\n    this.ws = null;\n    this.reconnectInterval = 5000;\n    this.reconnectAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.url = void 0;\n    this.url = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n  }\n  connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      this.ws.onopen = this.onOpen.bind(this);\n      this.ws.onmessage = this.onMessage.bind(this);\n      this.ws.onclose = this.onClose.bind(this);\n      this.ws.onerror = this.onError.bind(this);\n    } catch (error) {\n      console.error('WebSocket connection error:', error);\n      this.scheduleReconnect();\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n  onOpen() {\n    console.log('WebSocket connected');\n    store.dispatch(setConnectionStatus('connected'));\n    this.reconnectAttempts = 0;\n\n    // Subscribe to market data for watchlist\n    this.subscribe('market_data', {\n      symbols: store.getState().marketData.watchlist\n    });\n\n    // Subscribe to portfolio updates\n    this.subscribe('portfolio_updates', {});\n\n    // Subscribe to order updates\n    this.subscribe('order_updates', {});\n\n    // Subscribe to alerts\n    this.subscribe('alerts', {});\n  }\n  onMessage(event) {\n    try {\n      const message = JSON.parse(event.data);\n      this.handleMessage(message);\n    } catch (error) {\n      console.error('Error parsing WebSocket message:', error);\n    }\n  }\n  onClose() {\n    console.log('WebSocket disconnected');\n    store.dispatch(setConnectionStatus('disconnected'));\n    this.scheduleReconnect();\n  }\n  onError(error) {\n    console.error('WebSocket error:', error);\n    store.dispatch(setConnectionStatus('disconnected'));\n  }\n  scheduleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect in ${this.reconnectInterval}ms (attempt ${this.reconnectAttempts})`);\n      setTimeout(() => {\n        store.dispatch(setConnectionStatus('connecting'));\n        this.connect();\n      }, this.reconnectInterval);\n\n      // Exponential backoff\n      this.reconnectInterval = Math.min(this.reconnectInterval * 2, 30000);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n  handleMessage(message) {\n    const {\n      type,\n      data\n    } = message;\n    switch (type) {\n      case 'market_data':\n        if (Array.isArray(data)) {\n          store.dispatch(updateQuotes(data));\n        } else {\n          store.dispatch(updateQuote(data));\n        }\n        break;\n      case 'portfolio_update':\n        if (data.type === 'portfolio') {\n          store.dispatch(updatePortfolio(data.portfolio));\n        } else if (data.type === 'position') {\n          store.dispatch(updatePosition(data.position));\n        }\n        break;\n      case 'order_update':\n        if (data.action === 'create') {\n          store.dispatch(addOrder(data.order));\n        } else if (data.action === 'update') {\n          store.dispatch(updateOrder(data.order));\n        }\n        break;\n      case 'alert':\n        store.dispatch(addAlert(data));\n        break;\n      case 'system':\n        console.log('System message:', data);\n        break;\n      default:\n        console.log('Unknown message type:', type);\n    }\n  }\n  subscribe(channel, params) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message = {\n        action: 'subscribe',\n        channel,\n        params\n      };\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n  unsubscribe(channel) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message = {\n        action: 'unsubscribe',\n        channel\n      };\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n  send(message) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n}\nexport const webSocketService = new WebSocketService();","map":{"version":3,"names":["store","updateQuote","updateQuotes","setConnectionStatus","updatePortfolio","updatePosition","addOrder","updateOrder","addAlert","WebSocketService","constructor","ws","reconnectInterval","reconnectAttempts","maxReconnectAttempts","url","process","env","REACT_APP_WS_URL","connect","WebSocket","onopen","onOpen","bind","onmessage","onMessage","onclose","onClose","onerror","onError","error","console","scheduleReconnect","disconnect","close","log","dispatch","subscribe","symbols","getState","marketData","watchlist","event","message","JSON","parse","data","handleMessage","setTimeout","Math","min","type","Array","isArray","portfolio","position","action","order","channel","params","readyState","OPEN","send","stringify","unsubscribe","webSocketService"],"sources":["/workspaces/Samrddhi/frontend/src/services/websocket.ts"],"sourcesContent":["import { store } from '../store';\nimport {\n  updateQuote,\n  updateQuotes,\n  setConnectionStatus,\n} from '../store/slices/marketDataSlice';\nimport {\n  updatePortfolio,\n  updatePosition,\n} from '../store/slices/portfolioSlice';\nimport {\n  addOrder,\n  updateOrder,\n} from '../store/slices/ordersSlice';\nimport {\n  addAlert,\n} from '../store/slices/alertsSlice';\nimport { WebSocketMessage } from '../types';\n\nclass WebSocketService {\n  private ws: WebSocket | null = null;\n  private reconnectInterval: number = 5000;\n  private reconnectAttempts: number = 0;\n  private maxReconnectAttempts: number = 5;\n  private url: string;\n\n  constructor() {\n    this.url = process.env.REACT_APP_WS_URL || 'ws://localhost:8000/ws';\n  }\n\n  connect() {\n    try {\n      this.ws = new WebSocket(this.url);\n      \n      this.ws.onopen = this.onOpen.bind(this);\n      this.ws.onmessage = this.onMessage.bind(this);\n      this.ws.onclose = this.onClose.bind(this);\n      this.ws.onerror = this.onError.bind(this);\n    } catch (error) {\n      console.error('WebSocket connection error:', error);\n      this.scheduleReconnect();\n    }\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n      this.ws = null;\n    }\n  }\n\n  private onOpen() {\n    console.log('WebSocket connected');\n    store.dispatch(setConnectionStatus('connected'));\n    this.reconnectAttempts = 0;\n    \n    // Subscribe to market data for watchlist\n    this.subscribe('market_data', {\n      symbols: store.getState().marketData.watchlist,\n    });\n    \n    // Subscribe to portfolio updates\n    this.subscribe('portfolio_updates', {});\n    \n    // Subscribe to order updates\n    this.subscribe('order_updates', {});\n    \n    // Subscribe to alerts\n    this.subscribe('alerts', {});\n  }\n\n  private onMessage(event: MessageEvent) {\n    try {\n      const message: WebSocketMessage = JSON.parse(event.data);\n      this.handleMessage(message);\n    } catch (error) {\n      console.error('Error parsing WebSocket message:', error);\n    }\n  }\n\n  private onClose() {\n    console.log('WebSocket disconnected');\n    store.dispatch(setConnectionStatus('disconnected'));\n    this.scheduleReconnect();\n  }\n\n  private onError(error: Event) {\n    console.error('WebSocket error:', error);\n    store.dispatch(setConnectionStatus('disconnected'));\n  }\n\n  private scheduleReconnect() {\n    if (this.reconnectAttempts < this.maxReconnectAttempts) {\n      this.reconnectAttempts++;\n      console.log(`Attempting to reconnect in ${this.reconnectInterval}ms (attempt ${this.reconnectAttempts})`);\n      \n      setTimeout(() => {\n        store.dispatch(setConnectionStatus('connecting'));\n        this.connect();\n      }, this.reconnectInterval);\n      \n      // Exponential backoff\n      this.reconnectInterval = Math.min(this.reconnectInterval * 2, 30000);\n    } else {\n      console.error('Max reconnection attempts reached');\n    }\n  }\n\n  private handleMessage(message: WebSocketMessage) {\n    const { type, data } = message;\n    \n    switch (type) {\n      case 'market_data':\n        if (Array.isArray(data)) {\n          store.dispatch(updateQuotes(data));\n        } else {\n          store.dispatch(updateQuote(data));\n        }\n        break;\n        \n      case 'portfolio_update':\n        if (data.type === 'portfolio') {\n          store.dispatch(updatePortfolio(data.portfolio));\n        } else if (data.type === 'position') {\n          store.dispatch(updatePosition(data.position));\n        }\n        break;\n        \n      case 'order_update':\n        if (data.action === 'create') {\n          store.dispatch(addOrder(data.order));\n        } else if (data.action === 'update') {\n          store.dispatch(updateOrder(data.order));\n        }\n        break;\n        \n      case 'alert':\n        store.dispatch(addAlert(data));\n        break;\n        \n      case 'system':\n        console.log('System message:', data);\n        break;\n        \n      default:\n        console.log('Unknown message type:', type);\n    }\n  }\n\n  subscribe(channel: string, params: any) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message = {\n        action: 'subscribe',\n        channel,\n        params,\n      };\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n\n  unsubscribe(channel: string) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      const message = {\n        action: 'unsubscribe',\n        channel,\n      };\n      this.ws.send(JSON.stringify(message));\n    }\n  }\n\n  send(message: any) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify(message));\n    } else {\n      console.error('WebSocket is not connected');\n    }\n  }\n}\n\nexport const webSocketService = new WebSocketService();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
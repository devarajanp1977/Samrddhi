{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  quotes: {},\n  watchlist: ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX'],\n  loading: false,\n  error: null,\n  connectionStatus: 'disconnected'\n};\nconst marketDataSlice = createSlice({\n  name: 'marketData',\n  initialState,\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n      if (action.payload) {\n        state.error = null;\n      }\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setConnectionStatus: (state, action) => {\n      state.connectionStatus = action.payload;\n    },\n    updateQuote: (state, action) => {\n      state.quotes[action.payload.symbol] = action.payload;\n    },\n    updateQuotes: (state, action) => {\n      action.payload.forEach(quote => {\n        state.quotes[quote.symbol] = quote;\n      });\n      state.loading = false;\n      state.error = null;\n    },\n    addToWatchlist: (state, action) => {\n      if (!state.watchlist.includes(action.payload)) {\n        state.watchlist.push(action.payload);\n      }\n    },\n    removeFromWatchlist: (state, action) => {\n      state.watchlist = state.watchlist.filter(symbol => symbol !== action.payload);\n    },\n    setWatchlist: (state, action) => {\n      state.watchlist = action.payload;\n    },\n    clearQuotes: state => {\n      state.quotes = {};\n    }\n  }\n});\nexport const {\n  setLoading,\n  setError,\n  setConnectionStatus,\n  updateQuote,\n  updateQuotes,\n  addToWatchlist,\n  removeFromWatchlist,\n  setWatchlist,\n  clearQuotes\n} = marketDataSlice.actions;\nexport default marketDataSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","quotes","watchlist","loading","error","connectionStatus","marketDataSlice","name","reducers","setLoading","state","action","payload","setError","setConnectionStatus","updateQuote","symbol","updateQuotes","forEach","quote","addToWatchlist","includes","push","removeFromWatchlist","filter","setWatchlist","clearQuotes","actions","reducer"],"sources":["/workspaces/Samrddhi/frontend/src/store/slices/marketDataSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { MarketData } from '../../types';\n\ninterface MarketDataState {\n  quotes: Record<string, MarketData>;\n  watchlist: string[];\n  loading: boolean;\n  error: string | null;\n  connectionStatus: 'connected' | 'connecting' | 'disconnected';\n}\n\nconst initialState: MarketDataState = {\n  quotes: {},\n  watchlist: ['AAPL', 'MSFT', 'GOOGL', 'AMZN', 'TSLA', 'NVDA', 'META', 'NFLX'],\n  loading: false,\n  error: null,\n  connectionStatus: 'disconnected',\n};\n\nconst marketDataSlice = createSlice({\n  name: 'marketData',\n  initialState,\n  reducers: {\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n      if (action.payload) {\n        state.error = null;\n      }\n    },\n    setError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setConnectionStatus: (state, action: PayloadAction<'connected' | 'connecting' | 'disconnected'>) => {\n      state.connectionStatus = action.payload;\n    },\n    updateQuote: (state, action: PayloadAction<MarketData>) => {\n      state.quotes[action.payload.symbol] = action.payload;\n    },\n    updateQuotes: (state, action: PayloadAction<MarketData[]>) => {\n      action.payload.forEach(quote => {\n        state.quotes[quote.symbol] = quote;\n      });\n      state.loading = false;\n      state.error = null;\n    },\n    addToWatchlist: (state, action: PayloadAction<string>) => {\n      if (!state.watchlist.includes(action.payload)) {\n        state.watchlist.push(action.payload);\n      }\n    },\n    removeFromWatchlist: (state, action: PayloadAction<string>) => {\n      state.watchlist = state.watchlist.filter(symbol => symbol !== action.payload);\n    },\n    setWatchlist: (state, action: PayloadAction<string[]>) => {\n      state.watchlist = action.payload;\n    },\n    clearQuotes: (state) => {\n      state.quotes = {};\n    },\n  },\n});\n\nexport const {\n  setLoading,\n  setError,\n  setConnectionStatus,\n  updateQuote,\n  updateQuotes,\n  addToWatchlist,\n  removeFromWatchlist,\n  setWatchlist,\n  clearQuotes,\n} = marketDataSlice.actions;\n\nexport default marketDataSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAW7D,MAAMC,YAA6B,GAAG;EACpCC,MAAM,EAAE,CAAC,CAAC;EACVC,SAAS,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;EAC5EC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,gBAAgB,EAAE;AACpB,CAAC;AAED,MAAMC,eAAe,GAAGP,WAAW,CAAC;EAClCQ,IAAI,EAAE,YAAY;EAClBP,YAAY;EACZQ,QAAQ,EAAE;IACRC,UAAU,EAAEA,CAACC,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,OAAO;MAC9B,IAAID,MAAM,CAACC,OAAO,EAAE;QAClBF,KAAK,CAACN,KAAK,GAAG,IAAI;MACpB;IACF,CAAC;IACDS,QAAQ,EAAEA,CAACH,KAAK,EAAEC,MAA6B,KAAK;MAClDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO;MAC5BF,KAAK,CAACP,OAAO,GAAG,KAAK;IACvB,CAAC;IACDW,mBAAmB,EAAEA,CAACJ,KAAK,EAAEC,MAAkE,KAAK;MAClGD,KAAK,CAACL,gBAAgB,GAAGM,MAAM,CAACC,OAAO;IACzC,CAAC;IACDG,WAAW,EAAEA,CAACL,KAAK,EAAEC,MAAiC,KAAK;MACzDD,KAAK,CAACT,MAAM,CAACU,MAAM,CAACC,OAAO,CAACI,MAAM,CAAC,GAAGL,MAAM,CAACC,OAAO;IACtD,CAAC;IACDK,YAAY,EAAEA,CAACP,KAAK,EAAEC,MAAmC,KAAK;MAC5DA,MAAM,CAACC,OAAO,CAACM,OAAO,CAACC,KAAK,IAAI;QAC9BT,KAAK,CAACT,MAAM,CAACkB,KAAK,CAACH,MAAM,CAAC,GAAGG,KAAK;MACpC,CAAC,CAAC;MACFT,KAAK,CAACP,OAAO,GAAG,KAAK;MACrBO,KAAK,CAACN,KAAK,GAAG,IAAI;IACpB,CAAC;IACDgB,cAAc,EAAEA,CAACV,KAAK,EAAEC,MAA6B,KAAK;MACxD,IAAI,CAACD,KAAK,CAACR,SAAS,CAACmB,QAAQ,CAACV,MAAM,CAACC,OAAO,CAAC,EAAE;QAC7CF,KAAK,CAACR,SAAS,CAACoB,IAAI,CAACX,MAAM,CAACC,OAAO,CAAC;MACtC;IACF,CAAC;IACDW,mBAAmB,EAAEA,CAACb,KAAK,EAAEC,MAA6B,KAAK;MAC7DD,KAAK,CAACR,SAAS,GAAGQ,KAAK,CAACR,SAAS,CAACsB,MAAM,CAACR,MAAM,IAAIA,MAAM,KAAKL,MAAM,CAACC,OAAO,CAAC;IAC/E,CAAC;IACDa,YAAY,EAAEA,CAACf,KAAK,EAAEC,MAA+B,KAAK;MACxDD,KAAK,CAACR,SAAS,GAAGS,MAAM,CAACC,OAAO;IAClC,CAAC;IACDc,WAAW,EAAGhB,KAAK,IAAK;MACtBA,KAAK,CAACT,MAAM,GAAG,CAAC,CAAC;IACnB;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXQ,UAAU;EACVI,QAAQ;EACRC,mBAAmB;EACnBC,WAAW;EACXE,YAAY;EACZG,cAAc;EACdG,mBAAmB;EACnBE,YAAY;EACZC;AACF,CAAC,GAAGpB,eAAe,CAACqB,OAAO;AAE3B,eAAerB,eAAe,CAACsB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  strategies: [],\n  activeStrategies: [],\n  loading: false,\n  error: null\n};\nconst strategiesSlice = createSlice({\n  name: 'strategies',\n  initialState,\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n      if (action.payload) {\n        state.error = null;\n      }\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setStrategies: (state, action) => {\n      state.strategies = action.payload;\n      state.activeStrategies = action.payload.filter(s => s.status === 'active').map(s => s.id);\n      state.loading = false;\n      state.error = null;\n    },\n    addStrategy: (state, action) => {\n      state.strategies.push(action.payload);\n      if (action.payload.status === 'active') {\n        state.activeStrategies.push(action.payload.id);\n      }\n    },\n    updateStrategy: (state, action) => {\n      const index = state.strategies.findIndex(strategy => strategy.id === action.payload.id);\n      if (index !== -1) {\n        const oldStrategy = state.strategies[index];\n        state.strategies[index] = action.payload;\n\n        // Update active strategies list\n        if (oldStrategy.status === 'active' && action.payload.status !== 'active') {\n          state.activeStrategies = state.activeStrategies.filter(id => id !== action.payload.id);\n        } else if (oldStrategy.status !== 'active' && action.payload.status === 'active') {\n          state.activeStrategies.push(action.payload.id);\n        }\n      }\n    },\n    removeStrategy: (state, action) => {\n      state.strategies = state.strategies.filter(strategy => strategy.id !== action.payload);\n      state.activeStrategies = state.activeStrategies.filter(id => id !== action.payload);\n    },\n    toggleStrategyStatus: (state, action) => {\n      const strategy = state.strategies.find(s => s.id === action.payload);\n      if (strategy) {\n        const wasActive = strategy.status === 'active';\n        strategy.status = wasActive ? 'inactive' : 'active';\n        strategy.updatedAt = new Date().toISOString();\n        if (wasActive) {\n          state.activeStrategies = state.activeStrategies.filter(id => id !== action.payload);\n        } else {\n          state.activeStrategies.push(action.payload);\n        }\n      }\n    },\n    updateStrategyPerformance: (state, action) => {\n      const strategy = state.strategies.find(s => s.id === action.payload.id);\n      if (strategy) {\n        strategy.performance = action.payload.performance;\n        strategy.updatedAt = new Date().toISOString();\n      }\n    }\n  }\n});\nexport const {\n  setLoading,\n  setError,\n  setStrategies,\n  addStrategy,\n  updateStrategy,\n  removeStrategy,\n  toggleStrategyStatus,\n  updateStrategyPerformance\n} = strategiesSlice.actions;\nexport default strategiesSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","strategies","activeStrategies","loading","error","strategiesSlice","name","reducers","setLoading","state","action","payload","setError","setStrategies","filter","s","status","map","id","addStrategy","push","updateStrategy","index","findIndex","strategy","oldStrategy","removeStrategy","toggleStrategyStatus","find","wasActive","updatedAt","Date","toISOString","updateStrategyPerformance","performance","actions","reducer"],"sources":["/workspaces/Samrddhi/frontend/src/store/slices/strategiesSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Strategy } from '../../types';\n\ninterface StrategiesState {\n  strategies: Strategy[];\n  activeStrategies: string[];\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: StrategiesState = {\n  strategies: [],\n  activeStrategies: [],\n  loading: false,\n  error: null,\n};\n\nconst strategiesSlice = createSlice({\n  name: 'strategies',\n  initialState,\n  reducers: {\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n      if (action.payload) {\n        state.error = null;\n      }\n    },\n    setError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    setStrategies: (state, action: PayloadAction<Strategy[]>) => {\n      state.strategies = action.payload;\n      state.activeStrategies = action.payload.filter(s => s.status === 'active').map(s => s.id);\n      state.loading = false;\n      state.error = null;\n    },\n    addStrategy: (state, action: PayloadAction<Strategy>) => {\n      state.strategies.push(action.payload);\n      if (action.payload.status === 'active') {\n        state.activeStrategies.push(action.payload.id);\n      }\n    },\n    updateStrategy: (state, action: PayloadAction<Strategy>) => {\n      const index = state.strategies.findIndex(strategy => strategy.id === action.payload.id);\n      if (index !== -1) {\n        const oldStrategy = state.strategies[index];\n        state.strategies[index] = action.payload;\n        \n        // Update active strategies list\n        if (oldStrategy.status === 'active' && action.payload.status !== 'active') {\n          state.activeStrategies = state.activeStrategies.filter(id => id !== action.payload.id);\n        } else if (oldStrategy.status !== 'active' && action.payload.status === 'active') {\n          state.activeStrategies.push(action.payload.id);\n        }\n      }\n    },\n    removeStrategy: (state, action: PayloadAction<string>) => {\n      state.strategies = state.strategies.filter(strategy => strategy.id !== action.payload);\n      state.activeStrategies = state.activeStrategies.filter(id => id !== action.payload);\n    },\n    toggleStrategyStatus: (state, action: PayloadAction<string>) => {\n      const strategy = state.strategies.find(s => s.id === action.payload);\n      if (strategy) {\n        const wasActive = strategy.status === 'active';\n        strategy.status = wasActive ? 'inactive' : 'active';\n        strategy.updatedAt = new Date().toISOString();\n        \n        if (wasActive) {\n          state.activeStrategies = state.activeStrategies.filter(id => id !== action.payload);\n        } else {\n          state.activeStrategies.push(action.payload);\n        }\n      }\n    },\n    updateStrategyPerformance: (state, action: PayloadAction<{ id: string; performance: Strategy['performance'] }>) => {\n      const strategy = state.strategies.find(s => s.id === action.payload.id);\n      if (strategy) {\n        strategy.performance = action.payload.performance;\n        strategy.updatedAt = new Date().toISOString();\n      }\n    },\n  },\n});\n\nexport const {\n  setLoading,\n  setError,\n  setStrategies,\n  addStrategy,\n  updateStrategy,\n  removeStrategy,\n  toggleStrategyStatus,\n  updateStrategyPerformance,\n} = strategiesSlice.actions;\n\nexport default strategiesSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"export const mockPortfolio = {\n  totalValue: 393.00,\n  totalCost: 393.00,\n  totalPnL: 0.00,\n  totalPnLPercent: 0.00,\n  dayPnL: 0.00,\n  dayPnLPercent: 0.00,\n  buyingPower: 393.00,\n  cash: 393.00,\n  positions: [],\n  lastUpdated: new Date().toISOString()\n};\nexport const mockPositions = [];\nexport const mockAccount = {\n  id: 'acc_001',\n  accountNumber: 'RH123456789',\n  totalValue: 393.00,\n  buyingPower: 393.00,\n  cash: 393.00,\n  dayTrades: 0,\n  dayTradesLimit: 3,\n  patternDayTrader: false,\n  status: 'active',\n  type: 'cash',\n  lastUpdated: new Date().toISOString()\n};\nexport const mockOrders = [];\nexport const mockStrategies = [{\n  id: 'strategy_001',\n  name: 'Momentum Scalper',\n  description: '5-7% profit target scalping strategy for stocks under $10',\n  type: 'momentum',\n  status: 'inactive',\n  riskLevel: 'medium',\n  targetProfit: 6.0,\n  maxLoss: 2.0,\n  timeframe: '5m',\n  symbols: ['AAPL', 'MSFT', 'GOOGL'],\n  parameters: {\n    rsi_threshold: 70,\n    volume_multiplier: 2.0,\n    breakout_confirmation: true\n  },\n  performance: {\n    totalTrades: 0,\n    winRate: 0,\n    avgProfit: 0,\n    avgLoss: 0,\n    profitFactor: 0,\n    sharpeRatio: 0\n  },\n  createdAt: new Date().toISOString(),\n  updatedAt: new Date().toISOString()\n}];\nexport const mockMarketData = {\n  AAPL: {\n    symbol: 'AAPL',\n    price: 175.84,\n    change: 2.15,\n    changePercent: 1.24,\n    volume: 42580000,\n    high: 176.50,\n    low: 173.25,\n    open: 174.00,\n    close: 175.84,\n    timestamp: new Date().toISOString(),\n    bid: 175.83,\n    ask: 175.85,\n    bidSize: 500,\n    askSize: 300\n  },\n  MSFT: {\n    symbol: 'MSFT',\n    price: 420.55,\n    change: -1.85,\n    changePercent: -0.44,\n    volume: 18750000,\n    high: 422.80,\n    low: 419.50,\n    open: 421.20,\n    close: 420.55,\n    timestamp: new Date().toISOString(),\n    bid: 420.54,\n    ask: 420.56,\n    bidSize: 200,\n    askSize: 400\n  },\n  GOOGL: {\n    symbol: 'GOOGL',\n    price: 2785.60,\n    change: 15.40,\n    changePercent: 0.56,\n    volume: 1240000,\n    high: 2790.25,\n    low: 2770.10,\n    open: 2775.30,\n    close: 2785.60,\n    timestamp: new Date().toISOString(),\n    bid: 2785.55,\n    ask: 2785.65,\n    bidSize: 100,\n    askSize: 150\n  },\n  AMZN: {\n    symbol: 'AMZN',\n    price: 3380.75,\n    change: -12.85,\n    changePercent: -0.38,\n    volume: 3580000,\n    high: 3395.50,\n    low: 3375.20,\n    open: 3390.40,\n    close: 3380.75,\n    timestamp: new Date().toISOString(),\n    bid: 3380.70,\n    ask: 3380.80,\n    bidSize: 80,\n    askSize: 120\n  },\n  TSLA: {\n    symbol: 'TSLA',\n    price: 251.45,\n    change: 8.75,\n    changePercent: 3.61,\n    volume: 65240000,\n    high: 253.80,\n    low: 245.30,\n    open: 246.50,\n    close: 251.45,\n    timestamp: new Date().toISOString(),\n    bid: 251.43,\n    ask: 251.47,\n    bidSize: 300,\n    askSize: 250\n  },\n  NVDA: {\n    symbol: 'NVDA',\n    price: 875.30,\n    change: 22.15,\n    changePercent: 2.59,\n    volume: 28950000,\n    high: 880.50,\n    low: 865.75,\n    open: 870.20,\n    close: 875.30,\n    timestamp: new Date().toISOString(),\n    bid: 875.28,\n    ask: 875.32,\n    bidSize: 150,\n    askSize: 200\n  },\n  META: {\n    symbol: 'META',\n    price: 505.25,\n    change: -3.45,\n    changePercent: -0.68,\n    volume: 12750000,\n    high: 508.80,\n    low: 502.10,\n    open: 507.50,\n    close: 505.25,\n    timestamp: new Date().toISOString(),\n    bid: 505.23,\n    ask: 505.27,\n    bidSize: 180,\n    askSize: 220\n  },\n  NFLX: {\n    symbol: 'NFLX',\n    price: 485.90,\n    change: 7.20,\n    changePercent: 1.50,\n    volume: 4580000,\n    high: 488.30,\n    low: 480.15,\n    open: 482.40,\n    close: 485.90,\n    timestamp: new Date().toISOString(),\n    bid: 485.88,\n    ask: 485.92,\n    bidSize: 120,\n    askSize: 160\n  }\n};\nexport const mockAlerts = [{\n  id: 'alert_001',\n  type: 'info',\n  title: 'System Ready',\n  message: 'SAMRDDHI trading platform is ready for operation',\n  severity: 'low',\n  read: false,\n  createdAt: new Date().toISOString()\n}, {\n  id: 'alert_002',\n  type: 'warning',\n  title: 'Backend Disconnected',\n  message: 'Backend services are not running. Start backend services to enable live trading.',\n  severity: 'high',\n  read: false,\n  createdAt: new Date().toISOString()\n}];\nexport const mockSystemHealth = {\n  status: 'degraded',\n  services: {\n    'api-gateway': {\n      status: 'down',\n      latency: 0,\n      lastCheck: new Date().toISOString()\n    },\n    'portfolio-service': {\n      status: 'down',\n      latency: 0,\n      lastCheck: new Date().toISOString()\n    },\n    'market-data-service': {\n      status: 'down',\n      latency: 0,\n      lastCheck: new Date().toISOString()\n    }\n  },\n  marketDataStatus: 'disconnected',\n  tradingStatus: 'disabled',\n  lastUpdated: new Date().toISOString()\n};","map":{"version":3,"names":["mockPortfolio","totalValue","totalCost","totalPnL","totalPnLPercent","dayPnL","dayPnLPercent","buyingPower","cash","positions","lastUpdated","Date","toISOString","mockPositions","mockAccount","id","accountNumber","dayTrades","dayTradesLimit","patternDayTrader","status","type","mockOrders","mockStrategies","name","description","riskLevel","targetProfit","maxLoss","timeframe","symbols","parameters","rsi_threshold","volume_multiplier","breakout_confirmation","performance","totalTrades","winRate","avgProfit","avgLoss","profitFactor","sharpeRatio","createdAt","updatedAt","mockMarketData","AAPL","symbol","price","change","changePercent","volume","high","low","open","close","timestamp","bid","ask","bidSize","askSize","MSFT","GOOGL","AMZN","TSLA","NVDA","META","NFLX","mockAlerts","title","message","severity","read","mockSystemHealth","services","latency","lastCheck","marketDataStatus","tradingStatus"],"sources":["/workspaces/Samrddhi/frontend/src/utils/mockData.ts"],"sourcesContent":["import { \n  Portfolio, \n  Position, \n  Order, \n  Strategy, \n  Account, \n  MarketData, \n  Alert, \n  RiskMetrics, \n  SystemHealth \n} from '../types';\n\nexport const mockPortfolio: Portfolio = {\n  totalValue: 393.00,\n  totalCost: 393.00,\n  totalPnL: 0.00,\n  totalPnLPercent: 0.00,\n  dayPnL: 0.00,\n  dayPnLPercent: 0.00,\n  buyingPower: 393.00,\n  cash: 393.00,\n  positions: [],\n  lastUpdated: new Date().toISOString(),\n};\n\nexport const mockPositions: Position[] = [];\n\nexport const mockAccount: Account = {\n  id: 'acc_001',\n  accountNumber: 'RH123456789',\n  totalValue: 393.00,\n  buyingPower: 393.00,\n  cash: 393.00,\n  dayTrades: 0,\n  dayTradesLimit: 3,\n  patternDayTrader: false,\n  status: 'active',\n  type: 'cash',\n  lastUpdated: new Date().toISOString(),\n};\n\nexport const mockOrders: Order[] = [];\n\nexport const mockStrategies: Strategy[] = [\n  {\n    id: 'strategy_001',\n    name: 'Momentum Scalper',\n    description: '5-7% profit target scalping strategy for stocks under $10',\n    type: 'momentum',\n    status: 'inactive',\n    riskLevel: 'medium',\n    targetProfit: 6.0,\n    maxLoss: 2.0,\n    timeframe: '5m',\n    symbols: ['AAPL', 'MSFT', 'GOOGL'],\n    parameters: {\n      rsi_threshold: 70,\n      volume_multiplier: 2.0,\n      breakout_confirmation: true,\n    },\n    performance: {\n      totalTrades: 0,\n      winRate: 0,\n      avgProfit: 0,\n      avgLoss: 0,\n      profitFactor: 0,\n      sharpeRatio: 0,\n    },\n    createdAt: new Date().toISOString(),\n    updatedAt: new Date().toISOString(),\n  },\n];\n\nexport const mockMarketData: Record<string, MarketData> = {\n  AAPL: {\n    symbol: 'AAPL',\n    price: 175.84,\n    change: 2.15,\n    changePercent: 1.24,\n    volume: 42580000,\n    high: 176.50,\n    low: 173.25,\n    open: 174.00,\n    close: 175.84,\n    timestamp: new Date().toISOString(),\n    bid: 175.83,\n    ask: 175.85,\n    bidSize: 500,\n    askSize: 300,\n  },\n  MSFT: {\n    symbol: 'MSFT',\n    price: 420.55,\n    change: -1.85,\n    changePercent: -0.44,\n    volume: 18750000,\n    high: 422.80,\n    low: 419.50,\n    open: 421.20,\n    close: 420.55,\n    timestamp: new Date().toISOString(),\n    bid: 420.54,\n    ask: 420.56,\n    bidSize: 200,\n    askSize: 400,\n  },\n  GOOGL: {\n    symbol: 'GOOGL',\n    price: 2785.60,\n    change: 15.40,\n    changePercent: 0.56,\n    volume: 1240000,\n    high: 2790.25,\n    low: 2770.10,\n    open: 2775.30,\n    close: 2785.60,\n    timestamp: new Date().toISOString(),\n    bid: 2785.55,\n    ask: 2785.65,\n    bidSize: 100,\n    askSize: 150,\n  },\n  AMZN: {\n    symbol: 'AMZN',\n    price: 3380.75,\n    change: -12.85,\n    changePercent: -0.38,\n    volume: 3580000,\n    high: 3395.50,\n    low: 3375.20,\n    open: 3390.40,\n    close: 3380.75,\n    timestamp: new Date().toISOString(),\n    bid: 3380.70,\n    ask: 3380.80,\n    bidSize: 80,\n    askSize: 120,\n  },\n  TSLA: {\n    symbol: 'TSLA',\n    price: 251.45,\n    change: 8.75,\n    changePercent: 3.61,\n    volume: 65240000,\n    high: 253.80,\n    low: 245.30,\n    open: 246.50,\n    close: 251.45,\n    timestamp: new Date().toISOString(),\n    bid: 251.43,\n    ask: 251.47,\n    bidSize: 300,\n    askSize: 250,\n  },\n  NVDA: {\n    symbol: 'NVDA',\n    price: 875.30,\n    change: 22.15,\n    changePercent: 2.59,\n    volume: 28950000,\n    high: 880.50,\n    low: 865.75,\n    open: 870.20,\n    close: 875.30,\n    timestamp: new Date().toISOString(),\n    bid: 875.28,\n    ask: 875.32,\n    bidSize: 150,\n    askSize: 200,\n  },\n  META: {\n    symbol: 'META',\n    price: 505.25,\n    change: -3.45,\n    changePercent: -0.68,\n    volume: 12750000,\n    high: 508.80,\n    low: 502.10,\n    open: 507.50,\n    close: 505.25,\n    timestamp: new Date().toISOString(),\n    bid: 505.23,\n    ask: 505.27,\n    bidSize: 180,\n    askSize: 220,\n  },\n  NFLX: {\n    symbol: 'NFLX',\n    price: 485.90,\n    change: 7.20,\n    changePercent: 1.50,\n    volume: 4580000,\n    high: 488.30,\n    low: 480.15,\n    open: 482.40,\n    close: 485.90,\n    timestamp: new Date().toISOString(),\n    bid: 485.88,\n    ask: 485.92,\n    bidSize: 120,\n    askSize: 160,\n  },\n};\n\nexport const mockAlerts: Alert[] = [\n  {\n    id: 'alert_001',\n    type: 'info',\n    title: 'System Ready',\n    message: 'SAMRDDHI trading platform is ready for operation',\n    severity: 'low',\n    read: false,\n    createdAt: new Date().toISOString(),\n  },\n  {\n    id: 'alert_002',\n    type: 'warning',\n    title: 'Backend Disconnected',\n    message: 'Backend services are not running. Start backend services to enable live trading.',\n    severity: 'high',\n    read: false,\n    createdAt: new Date().toISOString(),\n  },\n];\n\nexport const mockSystemHealth: SystemHealth = {\n  status: 'degraded',\n  services: {\n    'api-gateway': {\n      status: 'down',\n      latency: 0,\n      lastCheck: new Date().toISOString(),\n    },\n    'portfolio-service': {\n      status: 'down',\n      latency: 0,\n      lastCheck: new Date().toISOString(),\n    },\n    'market-data-service': {\n      status: 'down',\n      latency: 0,\n      lastCheck: new Date().toISOString(),\n    },\n  },\n  marketDataStatus: 'disconnected',\n  tradingStatus: 'disabled',\n  lastUpdated: new Date().toISOString(),\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
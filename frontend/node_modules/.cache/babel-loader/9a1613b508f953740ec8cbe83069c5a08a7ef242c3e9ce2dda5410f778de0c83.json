{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  totalValue: 0,\n  totalCost: 0,\n  totalPnL: 0,\n  totalPnLPercent: 0,\n  dayPnL: 0,\n  dayPnLPercent: 0,\n  buyingPower: 0,\n  cash: 0,\n  positions: [],\n  lastUpdated: new Date().toISOString(),\n  loading: false,\n  error: null\n};\nconst portfolioSlice = createSlice({\n  name: 'portfolio',\n  initialState,\n  reducers: {\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n      if (action.payload) {\n        state.error = null;\n      }\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    updatePortfolio: (state, action) => {\n      Object.assign(state, action.payload);\n      state.lastUpdated = new Date().toISOString();\n      state.loading = false;\n      state.error = null;\n    },\n    updatePosition: (state, action) => {\n      const index = state.positions.findIndex(p => p.id === action.payload.id);\n      if (index !== -1) {\n        state.positions[index] = action.payload;\n      } else {\n        state.positions.push(action.payload);\n      }\n      state.lastUpdated = new Date().toISOString();\n    },\n    removePosition: (state, action) => {\n      state.positions = state.positions.filter(p => p.id !== action.payload);\n      state.lastUpdated = new Date().toISOString();\n    },\n    updatePortfolioValue: (state, action) => {\n      state.totalValue = action.payload.totalValue;\n      state.dayPnL = action.payload.dayPnL;\n      state.dayPnLPercent = action.payload.dayPnLPercent;\n      state.totalPnL = state.totalValue - state.totalCost;\n      state.totalPnLPercent = state.totalCost > 0 ? state.totalPnL / state.totalCost * 100 : 0;\n      state.lastUpdated = new Date().toISOString();\n    }\n  }\n});\nexport const {\n  setLoading,\n  setError,\n  updatePortfolio,\n  updatePosition,\n  removePosition,\n  updatePortfolioValue\n} = portfolioSlice.actions;\nexport default portfolioSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","totalValue","totalCost","totalPnL","totalPnLPercent","dayPnL","dayPnLPercent","buyingPower","cash","positions","lastUpdated","Date","toISOString","loading","error","portfolioSlice","name","reducers","setLoading","state","action","payload","setError","updatePortfolio","Object","assign","updatePosition","index","findIndex","p","id","push","removePosition","filter","updatePortfolioValue","actions","reducer"],"sources":["/workspaces/Samrddhi/frontend/src/store/slices/portfolioSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { Portfolio, Position } from '../../types';\n\ninterface PortfolioState extends Portfolio {\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: PortfolioState = {\n  totalValue: 0,\n  totalCost: 0,\n  totalPnL: 0,\n  totalPnLPercent: 0,\n  dayPnL: 0,\n  dayPnLPercent: 0,\n  buyingPower: 0,\n  cash: 0,\n  positions: [],\n  lastUpdated: new Date().toISOString(),\n  loading: false,\n  error: null,\n};\n\nconst portfolioSlice = createSlice({\n  name: 'portfolio',\n  initialState,\n  reducers: {\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n      if (action.payload) {\n        state.error = null;\n      }\n    },\n    setError: (state, action: PayloadAction<string>) => {\n      state.error = action.payload;\n      state.loading = false;\n    },\n    updatePortfolio: (state, action: PayloadAction<Partial<Portfolio>>) => {\n      Object.assign(state, action.payload);\n      state.lastUpdated = new Date().toISOString();\n      state.loading = false;\n      state.error = null;\n    },\n    updatePosition: (state, action: PayloadAction<Position>) => {\n      const index = state.positions.findIndex(p => p.id === action.payload.id);\n      if (index !== -1) {\n        state.positions[index] = action.payload;\n      } else {\n        state.positions.push(action.payload);\n      }\n      state.lastUpdated = new Date().toISOString();\n    },\n    removePosition: (state, action: PayloadAction<string>) => {\n      state.positions = state.positions.filter(p => p.id !== action.payload);\n      state.lastUpdated = new Date().toISOString();\n    },\n    updatePortfolioValue: (state, action: PayloadAction<{ totalValue: number; dayPnL: number; dayPnLPercent: number }>) => {\n      state.totalValue = action.payload.totalValue;\n      state.dayPnL = action.payload.dayPnL;\n      state.dayPnLPercent = action.payload.dayPnLPercent;\n      state.totalPnL = state.totalValue - state.totalCost;\n      state.totalPnLPercent = state.totalCost > 0 ? (state.totalPnL / state.totalCost) * 100 : 0;\n      state.lastUpdated = new Date().toISOString();\n    },\n  },\n});\n\nexport const {\n  setLoading,\n  setError,\n  updatePortfolio,\n  updatePosition,\n  removePosition,\n  updatePortfolioValue,\n} = portfolioSlice.actions;\n\nexport default portfolioSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _s = $RefreshSig$();\nimport { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// Import slices (we'll create these next)\nimport portfolioSlice from './slices/portfolioSlice';\nimport alertsSlice from './slices/alertsSlice';\nimport accountSlice from './slices/accountSlice';\nimport marketDataSlice from './slices/marketDataSlice';\nimport ordersSlice from './slices/ordersSlice';\nimport strategiesSlice from './slices/strategiesSlice';\nimport settingsSlice from './slices/settingsSlice';\nexport const store = configureStore({\n  reducer: {\n    portfolio: portfolioSlice,\n    alerts: alertsSlice,\n    account: accountSlice,\n    marketData: marketDataSlice,\n    orders: ordersSlice,\n    strategies: strategiesSlice,\n    settings: settingsSlice\n  },\n  middleware: getDefaultMiddleware => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE']\n    }\n  })\n});\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => {\n  _s();\n  return useDispatch();\n};\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\nexport const useAppSelector = useSelector;","map":{"version":3,"names":["configureStore","useDispatch","useSelector","portfolioSlice","alertsSlice","accountSlice","marketDataSlice","ordersSlice","strategiesSlice","settingsSlice","store","reducer","portfolio","alerts","account","marketData","orders","strategies","settings","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","useAppDispatch","_s","useAppSelector"],"sources":["/workspaces/Samrddhi/frontend/src/store/index.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit';\nimport { useDispatch, useSelector, TypedUseSelectorHook } from 'react-redux';\n\n// Import slices (we'll create these next)\nimport portfolioSlice from './slices/portfolioSlice';\nimport alertsSlice from './slices/alertsSlice';\nimport accountSlice from './slices/accountSlice';\nimport marketDataSlice from './slices/marketDataSlice';\nimport ordersSlice from './slices/ordersSlice';\nimport strategiesSlice from './slices/strategiesSlice';\nimport settingsSlice from './slices/settingsSlice';\n\nexport const store = configureStore({\n  reducer: {\n    portfolio: portfolioSlice,\n    alerts: alertsSlice,\n    account: accountSlice,\n    marketData: marketDataSlice,\n    orders: ordersSlice,\n    strategies: strategiesSlice,\n    settings: settingsSlice,\n  },\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: ['persist/PERSIST', 'persist/REHYDRATE'],\n      },\n    }),\n});\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,SAASC,WAAW,EAAEC,WAAW,QAA8B,aAAa;;AAE5E;AACA,OAAOC,cAAc,MAAM,yBAAyB;AACpD,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,YAAY,MAAM,uBAAuB;AAChD,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAOC,WAAW,MAAM,sBAAsB;AAC9C,OAAOC,eAAe,MAAM,0BAA0B;AACtD,OAAOC,aAAa,MAAM,wBAAwB;AAElD,OAAO,MAAMC,KAAK,GAAGV,cAAc,CAAC;EAClCW,OAAO,EAAE;IACPC,SAAS,EAAET,cAAc;IACzBU,MAAM,EAAET,WAAW;IACnBU,OAAO,EAAET,YAAY;IACrBU,UAAU,EAAET,eAAe;IAC3BU,MAAM,EAAET,WAAW;IACnBU,UAAU,EAAET,eAAe;IAC3BU,QAAQ,EAAET;EACZ,CAAC;EACDU,UAAU,EAAGC,oBAAoB,IAC/BA,oBAAoB,CAAC;IACnBC,iBAAiB,EAAE;MACjBC,cAAc,EAAE,CAAC,iBAAiB,EAAE,mBAAmB;IACzD;EACF,CAAC;AACL,CAAC,CAAC;AAKF;AACA,OAAO,MAAMC,cAAc,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMvB,WAAW,CAAc,CAAC;AAAA;AAACuB,EAAA,CAAlDD,cAAc;EAAA,QAAStB,WAAW;AAAA;AAC/C,OAAO,MAAMwB,cAA+C,GAAGvB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
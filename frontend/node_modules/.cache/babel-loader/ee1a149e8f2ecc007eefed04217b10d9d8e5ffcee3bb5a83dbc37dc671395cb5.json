{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nclass ApiService {\n  constructor() {\n    this.baseURL = void 0;\n    this.token = null;\n    this.baseURL = API_BASE_URL;\n    this.loadToken();\n  }\n  loadToken() {\n    this.token = localStorage.getItem('auth_token');\n  }\n  saveToken(token) {\n    this.token = token;\n    localStorage.setItem('auth_token', token);\n  }\n  clearToken() {\n    this.token = null;\n    localStorage.removeItem('auth_token');\n  }\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const headers = {\n      'Content-Type': 'application/json',\n      ...options.headers\n    };\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Authentication\n  async login(username, password) {\n    const response = await this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({\n        username,\n        password\n      })\n    });\n    if (response.success && response.data) {\n      this.saveToken(response.data.access_token);\n    }\n    return response;\n  }\n  async logout() {\n    try {\n      await this.request('/auth/logout', {\n        method: 'POST'\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      this.clearToken();\n    }\n  }\n\n  // Portfolio endpoints\n  async getPortfolio() {\n    return this.request('/api/v1/portfolio');\n  }\n  async getPositions() {\n    return this.request('/api/v1/portfolio/positions');\n  }\n\n  // Account endpoints\n  async getAccount() {\n    return this.request('/api/v1/account');\n  }\n\n  // Market data endpoints\n  async getQuote(symbol) {\n    return this.request(`/api/v1/market-data/quote/${symbol}`);\n  }\n  async getQuotes(symbols) {\n    return this.request('/api/v1/market-data/quotes', {\n      method: 'POST',\n      body: JSON.stringify({\n        symbols\n      })\n    });\n  }\n\n  // Orders endpoints\n  async getOrders(page = 1, limit = 50) {\n    return this.request(`/api/v1/orders?page=${page}&limit=${limit}`);\n  }\n  async createOrder(orderData) {\n    return this.request('/api/v1/orders', {\n      method: 'POST',\n      body: JSON.stringify(orderData)\n    });\n  }\n  async cancelOrder(orderId) {\n    return this.request(`/api/v1/orders/${orderId}/cancel`, {\n      method: 'POST'\n    });\n  }\n\n  // Strategies endpoints\n  async getStrategies() {\n    return this.request('/api/v1/strategies');\n  }\n  async toggleStrategy(strategyId) {\n    return this.request(`/api/v1/strategies/${strategyId}/toggle`, {\n      method: 'POST'\n    });\n  }\n\n  // Alerts endpoints\n  async getAlerts() {\n    return this.request('/api/v1/alerts');\n  }\n  async markAlertAsRead(alertId) {\n    return this.request(`/api/v1/alerts/${alertId}/read`, {\n      method: 'POST'\n    });\n  }\n\n  // System health endpoints\n  async getSystemHealth() {\n    return this.request('/api/v1/system/health');\n  }\n\n  // User preferences endpoints\n  async getUserPreferences() {\n    return this.request('/api/v1/user/preferences');\n  }\n  async updateUserPreferences(preferences) {\n    return this.request('/api/v1/user/preferences', {\n      method: 'PUT',\n      body: JSON.stringify(preferences)\n    });\n  }\n}\nexport const apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","token","loadToken","localStorage","getItem","saveToken","setItem","clearToken","removeItem","request","endpoint","options","url","headers","response","fetch","data","json","ok","Error","message","status","error","console","login","username","password","method","body","JSON","stringify","success","access_token","logout","getPortfolio","getPositions","getAccount","getQuote","symbol","getQuotes","symbols","getOrders","page","limit","createOrder","orderData","cancelOrder","orderId","getStrategies","toggleStrategy","strategyId","getAlerts","markAlertAsRead","alertId","getSystemHealth","getUserPreferences","updateUserPreferences","preferences","apiService"],"sources":["/workspaces/Samrddhi/frontend/src/services/apiService.ts"],"sourcesContent":["import { \n  ApiResponse, \n  PaginatedResponse,\n  Portfolio,\n  Position,\n  Order,\n  Strategy,\n  Account,\n  MarketData,\n  Alert,\n  RiskMetrics,\n  SystemHealth,\n  UserPreferences,\n  NewsItem\n} from '../types';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nclass ApiService {\n  private baseURL: string;\n  private token: string | null = null;\n\n  constructor() {\n    this.baseURL = API_BASE_URL;\n    this.loadToken();\n  }\n\n  private loadToken() {\n    this.token = localStorage.getItem('auth_token');\n  }\n\n  private saveToken(token: string) {\n    this.token = token;\n    localStorage.setItem('auth_token', token);\n  }\n\n  private clearToken() {\n    this.token = null;\n    localStorage.removeItem('auth_token');\n  }\n\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const url = `${this.baseURL}${endpoint}`;\n    const headers: Record<string, string> = {\n      'Content-Type': 'application/json',\n      ...(options.headers as Record<string, string>),\n    };\n\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n\n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers,\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API request failed:', error);\n      throw error;\n    }\n  }\n\n  // Authentication\n  async login(username: string, password: string) {\n    const response = await this.request<{ access_token: string; token_type: string }>('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify({ username, password }),\n    });\n\n    if (response.success && response.data) {\n      this.saveToken(response.data.access_token);\n    }\n\n    return response;\n  }\n\n  async logout() {\n    try {\n      await this.request('/auth/logout', { method: 'POST' });\n    } catch (error) {\n      console.error('Logout error:', error);\n    } finally {\n      this.clearToken();\n    }\n  }\n\n  // Portfolio endpoints\n  async getPortfolio(): Promise<ApiResponse<Portfolio>> {\n    return this.request('/api/v1/portfolio');\n  }\n\n  async getPositions(): Promise<ApiResponse<Position[]>> {\n    return this.request('/api/v1/portfolio/positions');\n  }\n\n  // Account endpoints\n  async getAccount(): Promise<ApiResponse<Account>> {\n    return this.request('/api/v1/account');\n  }\n\n  // Market data endpoints\n  async getQuote(symbol: string): Promise<ApiResponse<MarketData>> {\n    return this.request(`/api/v1/market-data/quote/${symbol}`);\n  }\n\n  async getQuotes(symbols: string[]): Promise<ApiResponse<MarketData[]>> {\n    return this.request('/api/v1/market-data/quotes', {\n      method: 'POST',\n      body: JSON.stringify({ symbols }),\n    });\n  }\n\n  // Orders endpoints\n  async getOrders(page: number = 1, limit: number = 50): Promise<ApiResponse<PaginatedResponse<Order>>> {\n    return this.request(`/api/v1/orders?page=${page}&limit=${limit}`);\n  }\n\n  async createOrder(orderData: {\n    symbol: string;\n    side: 'buy' | 'sell';\n    quantity: number;\n    type: 'market' | 'limit';\n    price?: number;\n  }): Promise<ApiResponse<Order>> {\n    return this.request('/api/v1/orders', {\n      method: 'POST',\n      body: JSON.stringify(orderData),\n    });\n  }\n\n  async cancelOrder(orderId: string): Promise<ApiResponse<Order>> {\n    return this.request(`/api/v1/orders/${orderId}/cancel`, {\n      method: 'POST',\n    });\n  }\n\n  // Strategies endpoints\n  async getStrategies(): Promise<ApiResponse<Strategy[]>> {\n    return this.request('/api/v1/strategies');\n  }\n\n  async toggleStrategy(strategyId: string): Promise<ApiResponse<Strategy>> {\n    return this.request(`/api/v1/strategies/${strategyId}/toggle`, {\n      method: 'POST',\n    });\n  }\n\n  // Alerts endpoints\n  async getAlerts(): Promise<ApiResponse<Alert[]>> {\n    return this.request('/api/v1/alerts');\n  }\n\n  async markAlertAsRead(alertId: string): Promise<ApiResponse<Alert>> {\n    return this.request(`/api/v1/alerts/${alertId}/read`, {\n      method: 'POST',\n    });\n  }\n\n  // System health endpoints\n  async getSystemHealth(): Promise<ApiResponse<SystemHealth>> {\n    return this.request('/api/v1/system/health');\n  }\n\n  // User preferences endpoints\n  async getUserPreferences(): Promise<ApiResponse<UserPreferences>> {\n    return this.request('/api/v1/user/preferences');\n  }\n\n  async updateUserPreferences(preferences: Partial<UserPreferences>): Promise<ApiResponse<UserPreferences>> {\n    return this.request('/api/v1/user/preferences', {\n      method: 'PUT',\n      body: JSON.stringify(preferences),\n    });\n  }\n}\n\nexport const apiService = new ApiService();\nexport default apiService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}